name: Deploy DEV (ECS)

on:
  push:
    branches: ['feature/infra-aws', 'develop']
    pull_request: { branches: [develop] }
  workflow_dispatch: # just manual trigger

permissions:
  id-token: write    # needed for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)  # assume role via GitHub OIDC, no static keys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR  # so docker can push image
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image  # build with commit SHA
        env:
          ECR_REPO: order-tracking
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f deploy/Dockerfile -t $REGISTRY/$ECR_REPO:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init + Workspace
        working-directory: infra/env
        run: |
          terraform init

      - name: Terraform Plan
        working-directory: infra/env
        run: |
          terraform plan \
            -var="image_tag=${{ github.sha }}" \
            -var="spring_profile=aws" \
            -var="enable_https=false"

      - name: Terraform Apply
        working-directory: infra/env
        run: |
          terraform apply -auto-approve \
            -var="image_tag=${{ github.sha }}" \
            -var="spring_profile=aws" \
            -var="enable_https=false"

      - name: Show URL
        working-directory: infra/env
        run: terraform output app_url
